{"version":3,"file":"static/js/419.3e1f99ed.chunk.js","mappings":"uKAIA,MAgFA,EAhFmBA,KACjB,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,CAAEG,KAAM,GAAIC,MAAO,GAAIC,QAAS,MAEvEC,EAAAA,EAAAA,YAAU,KACUC,WAChB,MAAMC,QAAqBC,EAAAA,EAAAA,IAAe,SAC1CV,EAASS,EAAa,EAExBE,EAAW,GACV,IAqBH,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8BAA6BC,SAAA,EAC1CC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,0BAAyBC,SAAC,iBACxCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACnBC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,yBAAwBC,SAAC,kBACvCC,EAAAA,EAAAA,KAAA,SACEX,KAAK,OACLY,YAAY,4BACZC,MAAOf,EAAQE,KACfc,SAAWC,GAAMhB,EAAW,IAAKD,EAASE,KAAMe,EAAEC,OAAOH,QACzDJ,UAAU,4BAEZE,EAAAA,EAAAA,KAAA,SACEX,KAAK,OACLY,YAAY,QACZC,MAAOf,EAAQG,MACfa,SAAWC,GAAMhB,EAAW,IAAKD,EAASG,MAAOc,EAAEC,OAAOH,QAC1DJ,UAAU,4BAEZE,EAAAA,EAAAA,KAAA,YACEC,YAAY,UACZC,MAAOf,EAAQI,QACfY,SAAWC,GAAMhB,EAAW,IAAKD,EAASI,QAASa,EAAEC,OAAOH,QAC5DJ,UAAU,4BAEZE,EAAAA,EAAAA,KAAA,UAAQM,QA5CQb,gBACdc,EAAAA,EAAAA,IAAY,QAASpB,GAC3BF,QAAeU,EAAAA,EAAAA,IAAe,UAC9BP,EAAW,CAAEC,KAAM,GAAIC,MAAO,GAAIC,QAAS,IAAK,EAyCZO,UAAU,2CAA0CC,SAAC,iBAIvFC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,yBAAwBC,SAAC,mBACtCf,EAAMwB,KAAKC,IACVZ,EAAAA,EAAAA,MAAA,OAAmBC,UAAU,kBAAiBC,SAAA,EAC5CC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,oBAAmBC,SAAEU,EAAKnB,SACxCU,EAAAA,EAAAA,KAAA,KAAAD,SAAIU,EAAKlB,WACTS,EAAAA,EAAAA,KAAA,KAAGF,UAAU,wBAAuBC,SAAEU,EAAKpB,QAC3CQ,EAAAA,EAAAA,MAAA,KAAGC,UAAU,wBAAuBC,SAAA,CAAC,YAAU,IAAIW,KAAKD,EAAKE,YAAYC,qBACzEf,EAAAA,EAAAA,MAAA,KAAGC,UAAU,wBAAuBC,SAAA,CAAC,YAAU,IAAIW,KAAKD,EAAKI,YAAYD,qBACzEZ,EAAAA,EAAAA,KAAA,UAAQM,QAASA,IA7CFb,WACrB,MAAMqB,EAAcC,OAAO,aAAcC,KAAKC,UAAUjC,EAAMkC,MAAKT,GAAQA,EAAKU,KAAOA,MACnFL,UACIM,EAAAA,EAAAA,IAAe,QAASD,EAAIH,KAAKK,MAAMP,IAC7C7B,QAAeU,EAAAA,EAAAA,IAAe,UAChC,EAwC6B2B,CAAeb,EAAKU,IAAKrB,UAAU,kDAAiDC,SAAC,UAG5GC,EAAAA,EAAAA,KAAA,UAAQM,QAASA,IArDAb,iBACjB8B,EAAAA,EAAAA,IAAe,QAASJ,GAC9BlC,QAAeU,EAAAA,EAAAA,IAAe,SAAS,EAmDV6B,CAAiBf,EAAKU,IAAKrB,UAAU,0CAAyCC,SAAC,aAT9FU,EAAKU,QAcb,C,uGCrEH,MAAMZ,EAAcd,MAAOgC,EAAgBC,KAChD,IACE,MAAMC,GAAY,IAAIjB,MAAOkB,oBACvBC,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAWC,EAAAA,GAAIN,GAAiB,IACxCC,EACHf,WAAYgB,EACZd,WAAYc,GAEhB,CAAE,MAAOK,GACPC,QAAQD,MAAM,4BAADE,OAA6BT,EAAc,KAAKO,EAC/D,GAUWZ,EAAiB3B,MAAOgC,EAAgBN,EAAIO,KACvD,IACE,MAAMC,GAAY,IAAIjB,MAAOkB,cACvBO,GAASC,EAAAA,EAAAA,IAAIL,EAAAA,GAAIN,EAAgBN,SACjCkB,EAAAA,EAAAA,IAAUF,EAAQ,IACnBT,EACHb,WAAYc,GAEhB,CAAE,MAAOK,GACPC,QAAQD,MAAM,8BAADE,OAA+BT,EAAc,KAAKO,EACjE,GASWT,EAAiB9B,MAAOgC,EAAgBN,KACnD,IACE,MAAMgB,GAASC,EAAAA,EAAAA,IAAIL,EAAAA,GAAIN,EAAgBN,SACjCmB,EAAAA,EAAAA,IAAUH,EAClB,CAAE,MAAOH,GACPC,QAAQD,MAAM,gCAADE,OAAiCT,EAAc,KAAKO,EACnE,GAQWrC,EAAiBF,UAC5B,IAEE,aAD4B8C,EAAAA,EAAAA,KAAQT,EAAAA,EAAAA,IAAWC,EAAAA,GAAIN,KAC9Be,KAAKhC,KAAI4B,IAAG,CAAOjB,GAAIiB,EAAIjB,MAAOiB,EAAIV,UAC7D,CAAE,MAAOM,GAEP,OADAC,QAAQD,MAAM,iCAADE,OAAkCT,EAAc,KAAKO,GAC3D,EACT,GA8BWS,EAAahD,MAAOiD,EAAMC,KACrC,IACE,MAAMC,GAAaC,EAAAA,EAAAA,IAAIC,EAAAA,GAAQ,GAADZ,OAAKS,EAAM,KAAAT,OAAIQ,EAAKK,aAC5CC,EAAAA,EAAAA,GAAYJ,EAAYF,GAC9B,MAAMO,QAAgBC,EAAAA,EAAAA,IAAeN,GAKrC,aAFMf,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAWC,EAAAA,GAAIY,GAAS,CAAEQ,IAAKF,EAAStC,YAAY,IAAID,MAAOkB,gBAErEqB,CACT,CAAE,MAAOjB,GAEP,MADAC,QAAQD,MAAM,wBAAyBA,GACjCA,CACR,E","sources":["components/AdminTools.js","utils/firestoreUtils.js"],"sourcesContent":["// src/components/AdminTools.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { addDocument, updateDocument, deleteDocument, fetchDocuments } from '../utils/firestoreUtils';\r\n\r\nconst AdminTools = () => {\r\n  const [tools, setTools] = useState([]);\r\n  const [newTool, setNewTool] = useState({ type: '', title: '', content: '' });\r\n\r\n  useEffect(() => {\r\n    const loadTools = async () => {\r\n      const fetchedTools = await fetchDocuments('tools');\r\n      setTools(fetchedTools);\r\n    };\r\n    loadTools();\r\n  }, []);\r\n\r\n  const handleAddTool = async () => {\r\n    await addDocument('tools', newTool);\r\n    setTools(await fetchDocuments('tools'));\r\n    setNewTool({ type: '', title: '', content: '' });\r\n  };\r\n\r\n  const handleDeleteTool = async (id) => {\r\n    await deleteDocument('tools', id);\r\n    setTools(await fetchDocuments('tools'));\r\n  };\r\n\r\n  const handleEditTool = async (id) => {\r\n    const updatedTool = prompt(\"Edit Tool:\", JSON.stringify(tools.find(tool => tool.id === id)));\r\n    if (updatedTool) {\r\n      await updateDocument('tools', id, JSON.parse(updatedTool));\r\n      setTools(await fetchDocuments('tools'));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-6\">\r\n      <h2 className=\"text-3xl font-bold mb-4\">Admin Tools</h2>\r\n      <div className=\"mb-4\">\r\n        <h3 className=\"text-xl font-bold mb-2\">Add New Tool</h3>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type (SQL, Note, Snippet)\"\r\n          value={newTool.type}\r\n          onChange={(e) => setNewTool({ ...newTool, type: e.target.value })}\r\n          className=\"border p-2 mb-2 w-full\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Title\"\r\n          value={newTool.title}\r\n          onChange={(e) => setNewTool({ ...newTool, title: e.target.value })}\r\n          className=\"border p-2 mb-2 w-full\"\r\n        />\r\n        <textarea\r\n          placeholder=\"Content\"\r\n          value={newTool.content}\r\n          onChange={(e) => setNewTool({ ...newTool, content: e.target.value })}\r\n          className=\"border p-2 mb-2 w-full\"\r\n        />\r\n        <button onClick={handleAddTool} className=\"bg-blue-500 text-white px-4 py-2 rounded\">\r\n          Add Tool\r\n        </button>\r\n      </div>\r\n      <h3 className=\"text-xl font-bold mb-2\">Existing Tools</h3>\r\n      {tools.map((tool) => (\r\n        <div key={tool.id} className=\"border p-4 mb-4\">\r\n          <h4 className=\"text-lg font-bold\">{tool.title}</h4>\r\n          <p>{tool.content}</p>\r\n          <p className=\"text-sm text-gray-500\">{tool.type}</p>\r\n          <p className=\"text-sm text-gray-500\">Created: {new Date(tool.created_at).toLocaleString()}</p>\r\n          <p className=\"text-sm text-gray-500\">Updated: {new Date(tool.updated_at).toLocaleString()}</p>\r\n          <button onClick={() => handleEditTool(tool.id)} className=\"bg-yellow-500 text-white px-4 py-2 rounded mr-2\">\r\n            Edit\r\n          </button>\r\n          <button onClick={() => handleDeleteTool(tool.id)} className=\"bg-red-500 text-white px-4 py-2 rounded\">\r\n            Delete\r\n          </button>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminTools;\r\n","// src/utils/firestoreUtils.js\r\nimport { db, storage } from '../firebaseConfig'; // Ensure storage is imported\r\nimport { collection, addDoc, updateDoc, deleteDoc, getDocs, doc, getDoc } from 'firebase/firestore';\r\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage'; // Import Firebase Storage functions\r\n\r\n/**\r\n * Add a document to a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @param {Object} data - The data to add\r\n * @returns {Promise<void>}\r\n */\r\nexport const addDocument = async (collectionName, data) => {\r\n  try {\r\n    const timestamp = new Date().toISOString();\r\n    await addDoc(collection(db, collectionName), {\r\n      ...data,\r\n      created_at: timestamp,\r\n      updated_at: timestamp\r\n    });\r\n  } catch (error) {\r\n    console.error(`Error adding document to ${collectionName}:`, error);\r\n  }\r\n};\r\n\r\n/**\r\n * Update a document in a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @param {string} id - The ID of the document to update\r\n * @param {Object} data - The data to update\r\n * @returns {Promise<void>}\r\n */\r\nexport const updateDocument = async (collectionName, id, data) => {\r\n  try {\r\n    const timestamp = new Date().toISOString();\r\n    const docRef = doc(db, collectionName, id);\r\n    await updateDoc(docRef, {\r\n      ...data,\r\n      updated_at: timestamp\r\n    });\r\n  } catch (error) {\r\n    console.error(`Error updating document in ${collectionName}:`, error);\r\n  }\r\n};\r\n\r\n/**\r\n * Delete a document from a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @param {string} id - The ID of the document to delete\r\n * @returns {Promise<void>}\r\n */\r\nexport const deleteDocument = async (collectionName, id) => {\r\n  try {\r\n    const docRef = doc(db, collectionName, id);\r\n    await deleteDoc(docRef);\r\n  } catch (error) {\r\n    console.error(`Error deleting document from ${collectionName}:`, error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch all documents from a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @returns {Promise<Array>}\r\n */\r\nexport const fetchDocuments = async (collectionName) => {\r\n  try {\r\n    const querySnapshot = await getDocs(collection(db, collectionName));\r\n    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n  } catch (error) {\r\n    console.error(`Error fetching documents from ${collectionName}:`, error);\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch a single document from a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @param {string} docId - The ID of the document to fetch\r\n * @returns {Promise<Object>} - The fetched document\r\n */\r\nexport const fetchDocument = async (collectionName, docId) => {\r\n  try {\r\n    const docRef = doc(db, collectionName, docId);\r\n    const docSnapshot = await getDoc(docRef);\r\n    if (docSnapshot.exists()) {\r\n      return { id: docSnapshot.id, ...docSnapshot.data() };\r\n    } else {\r\n      throw new Error('Document not found');\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching document from ${collectionName}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Upload a file to Firebase Storage\r\n * @param {File} file - The file to upload\r\n * @param {string} folder - The folder in storage to upload the file\r\n * @returns {Promise<string>} - The URL of the uploaded file\r\n */\r\nexport const uploadFile = async (file, folder) => {\r\n  try {\r\n    const storageRef = ref(storage, `${folder}/${file.name}`);\r\n    await uploadBytes(storageRef, file);\r\n    const fileURL = await getDownloadURL(storageRef);\r\n    \r\n    // Optionally, store the file URL in Firestore\r\n    await addDoc(collection(db, folder), { url: fileURL, created_at: new Date().toISOString() });\r\n\r\n    return fileURL;\r\n  } catch (error) {\r\n    console.error('Error uploading file:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"names":["AdminTools","tools","setTools","useState","newTool","setNewTool","type","title","content","useEffect","async","fetchedTools","fetchDocuments","loadTools","_jsxs","className","children","_jsx","placeholder","value","onChange","e","target","onClick","addDocument","map","tool","Date","created_at","toLocaleString","updated_at","updatedTool","prompt","JSON","stringify","find","id","updateDocument","parse","handleEditTool","deleteDocument","handleDeleteTool","collectionName","data","timestamp","toISOString","addDoc","collection","db","error","console","concat","docRef","doc","updateDoc","deleteDoc","getDocs","docs","uploadFile","file","folder","storageRef","ref","storage","name","uploadBytes","fileURL","getDownloadURL","url"],"sourceRoot":""}