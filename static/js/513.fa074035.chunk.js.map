{"version":3,"file":"static/js/513.fa074035.chunk.js","mappings":"uKAIA,MAmDA,EAnDmBA,KACjB,MAAOC,EAAgBC,IAAqBC,EAAAA,EAAAA,UAAS,KAErDC,EAAAA,EAAAA,YAAU,KACQC,WACd,IACEC,QAAQC,IAAI,+BACZ,MAAMC,QAAaC,EAAAA,EAAAA,IAAe,cAClCH,QAAQC,IAAI,gBAAiBC,GAC7BN,EAAkBM,EACpB,CAAE,MAAOE,GACPJ,QAAQI,MAAM,kCAAmCA,EACnD,GAGFC,EAAS,GACR,IAEH,MAAMC,EAA4BC,IAChC,MAAMC,EAAQD,EAAKE,MAAM,KACzB,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,8BAA6BF,SAAEJ,EAAM,KACpDA,EAAM,GAAE,KAAAO,OAAQP,EAAM,IAAO,KAC7B,EAIP,OACEE,EAAAA,EAAAA,MAAA,OAAKI,UAAU,8BAA6BF,SAAA,EAC1CC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,oDAAmDF,SAAC,oBACjEjB,EAAeqB,OAAS,EACvBrB,EAAesB,KAAKC,IAClBR,EAAAA,EAAAA,MAAA,OAAmBI,UAAU,yCAAwCF,SAAA,EACnEC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,uCAAsCF,SAAEM,EAAKC,WAC3DN,EAAAA,EAAAA,KAAA,KAAGC,UAAU,+BAA8BF,SAAEM,EAAKE,QAClDP,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBAAuBF,SAAEM,EAAKG,YAC3CR,EAAAA,EAAAA,KAAA,MAAIC,UAAU,oCAAmCF,SAC9CM,EAAKI,QAAQL,KAAI,CAACM,EAAQC,KACzBX,EAAAA,EAAAA,KAAA,MAAgBC,UAAU,eAAcF,SAAEN,EAAyBiB,IAA1DC,SANLN,EAAKO,OAYjBZ,EAAAA,EAAAA,KAAA,KAAGC,UAAU,oCAAmCF,SAAC,iBAE/C,C,uGCxCH,MAAMc,EAAc3B,MAAO4B,EAAgBzB,KAChD,IACE,MAAM0B,GAAY,IAAIC,MAAOC,oBACvBC,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAWC,EAAAA,GAAIN,GAAiB,IACxCzB,EACHgC,WAAYN,EACZO,WAAYP,GAEhB,CAAE,MAAOxB,GACPJ,QAAQI,MAAM,4BAADW,OAA6BY,EAAc,KAAKvB,EAC/D,GAUWgC,EAAiBrC,MAAO4B,EAAgBF,EAAIvB,KACvD,IACE,MAAM0B,GAAY,IAAIC,MAAOC,cACvBO,GAASC,EAAAA,EAAAA,IAAIL,EAAAA,GAAIN,EAAgBF,SACjCc,EAAAA,EAAAA,IAAUF,EAAQ,IACnBnC,EACHiC,WAAYP,GAEhB,CAAE,MAAOxB,GACPJ,QAAQI,MAAM,8BAADW,OAA+BY,EAAc,KAAKvB,EACjE,GASWoC,EAAiBzC,MAAO4B,EAAgBF,KACnD,IACE,MAAMY,GAASC,EAAAA,EAAAA,IAAIL,EAAAA,GAAIN,EAAgBF,SACjCgB,EAAAA,EAAAA,IAAUJ,EAClB,CAAE,MAAOjC,GACPJ,QAAQI,MAAM,gCAADW,OAAiCY,EAAc,KAAKvB,EACnE,GAQWD,EAAiBJ,UAC5B,IAEE,aAD4B2C,EAAAA,EAAAA,KAAQV,EAAAA,EAAAA,IAAWC,EAAAA,GAAIN,KAC9BgB,KAAK1B,KAAIqB,IAAG,CAAOb,GAAIa,EAAIb,MAAOa,EAAIpC,UAC7D,CAAE,MAAOE,GAEP,OADAJ,QAAQI,MAAM,iCAADW,OAAkCY,EAAc,KAAKvB,GAC3D,EACT,GA8BWwC,EAAa7C,MAAO8C,EAAMC,KACrC,IACE,MAAMC,GAAaC,EAAAA,EAAAA,IAAIC,EAAAA,GAAQ,GAADlC,OAAK+B,EAAM,KAAA/B,OAAI8B,EAAKK,aAC5CC,EAAAA,EAAAA,GAAYJ,EAAYF,GAC9B,MAAMO,QAAgBC,EAAAA,EAAAA,IAAeN,GAKrC,aAFMhB,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAWC,EAAAA,GAAIa,GAAS,CAAEQ,IAAKF,EAASlB,YAAY,IAAIL,MAAOC,gBAErEsB,CACT,CAAE,MAAOhD,GAEP,MADAJ,QAAQI,MAAM,wBAAyBA,GACjCA,CACR,E","sources":["components/Experience.js","utils/firestoreUtils.js"],"sourcesContent":["// src/components/Experience.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { fetchDocuments } from '../utils/firestoreUtils';\r\n\r\nconst Experience = () => {\r\n  const [experienceInfo, setExperienceInfo] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      try {\r\n        console.log('Fetching experience data...');\r\n        const data = await fetchDocuments('experience');\r\n        console.log('Data fetched:', data);\r\n        setExperienceInfo(data);\r\n      } catch (error) {\r\n        console.error('Error fetching experience data:', error);\r\n      }\r\n    };\r\n\r\n    getData();\r\n  }, []);\r\n\r\n  const highlightTextBeforeColon = (text) => {\r\n    const parts = text.split(':');\r\n    return (\r\n      <>\r\n        <span className=\"font-semibold text-gray-800\">{parts[0]}</span>\r\n        {parts[1] ? `: ${parts[1]}` : ''}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-6\">\r\n      <h2 className=\"text-4xl font-bold mb-6 text-center text-gray-800\">Work Experience</h2>\r\n      {experienceInfo.length > 0 ? (\r\n        experienceInfo.map((info) => (\r\n          <div key={info.id} className=\"mb-8 bg-white shadow-lg rounded-lg p-6\">\r\n            <h3 className=\"text-2xl font-semibold text-gray-800\">{info.company}</h3>\r\n            <p className=\"text-lg italic text-gray-600\">{info.role}</p>\r\n            <p className=\"text-lg text-gray-600\">{info.duration}</p>\r\n            <ul className=\"list-disc ml-6 mt-4 text-gray-700\">\r\n              {info.details.map((detail, index) => (\r\n                <li key={index} className=\"text-lg mb-2\">{highlightTextBeforeColon(detail)}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p className=\"text-lg text-center text-gray-600\">Loading...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Experience;\r\n","// src/utils/firestoreUtils.js\r\nimport { db, storage } from '../firebaseConfig'; // Ensure storage is imported\r\nimport { collection, addDoc, updateDoc, deleteDoc, getDocs, doc, getDoc } from 'firebase/firestore';\r\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage'; // Import Firebase Storage functions\r\n\r\n/**\r\n * Add a document to a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @param {Object} data - The data to add\r\n * @returns {Promise<void>}\r\n */\r\nexport const addDocument = async (collectionName, data) => {\r\n  try {\r\n    const timestamp = new Date().toISOString();\r\n    await addDoc(collection(db, collectionName), {\r\n      ...data,\r\n      created_at: timestamp,\r\n      updated_at: timestamp\r\n    });\r\n  } catch (error) {\r\n    console.error(`Error adding document to ${collectionName}:`, error);\r\n  }\r\n};\r\n\r\n/**\r\n * Update a document in a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @param {string} id - The ID of the document to update\r\n * @param {Object} data - The data to update\r\n * @returns {Promise<void>}\r\n */\r\nexport const updateDocument = async (collectionName, id, data) => {\r\n  try {\r\n    const timestamp = new Date().toISOString();\r\n    const docRef = doc(db, collectionName, id);\r\n    await updateDoc(docRef, {\r\n      ...data,\r\n      updated_at: timestamp\r\n    });\r\n  } catch (error) {\r\n    console.error(`Error updating document in ${collectionName}:`, error);\r\n  }\r\n};\r\n\r\n/**\r\n * Delete a document from a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @param {string} id - The ID of the document to delete\r\n * @returns {Promise<void>}\r\n */\r\nexport const deleteDocument = async (collectionName, id) => {\r\n  try {\r\n    const docRef = doc(db, collectionName, id);\r\n    await deleteDoc(docRef);\r\n  } catch (error) {\r\n    console.error(`Error deleting document from ${collectionName}:`, error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch all documents from a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @returns {Promise<Array>}\r\n */\r\nexport const fetchDocuments = async (collectionName) => {\r\n  try {\r\n    const querySnapshot = await getDocs(collection(db, collectionName));\r\n    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n  } catch (error) {\r\n    console.error(`Error fetching documents from ${collectionName}:`, error);\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch a single document from a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @param {string} docId - The ID of the document to fetch\r\n * @returns {Promise<Object>} - The fetched document\r\n */\r\nexport const fetchDocument = async (collectionName, docId) => {\r\n  try {\r\n    const docRef = doc(db, collectionName, docId);\r\n    const docSnapshot = await getDoc(docRef);\r\n    if (docSnapshot.exists()) {\r\n      return { id: docSnapshot.id, ...docSnapshot.data() };\r\n    } else {\r\n      throw new Error('Document not found');\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching document from ${collectionName}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Upload a file to Firebase Storage\r\n * @param {File} file - The file to upload\r\n * @param {string} folder - The folder in storage to upload the file\r\n * @returns {Promise<string>} - The URL of the uploaded file\r\n */\r\nexport const uploadFile = async (file, folder) => {\r\n  try {\r\n    const storageRef = ref(storage, `${folder}/${file.name}`);\r\n    await uploadBytes(storageRef, file);\r\n    const fileURL = await getDownloadURL(storageRef);\r\n    \r\n    // Optionally, store the file URL in Firestore\r\n    await addDoc(collection(db, folder), { url: fileURL, created_at: new Date().toISOString() });\r\n\r\n    return fileURL;\r\n  } catch (error) {\r\n    console.error('Error uploading file:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"names":["Experience","experienceInfo","setExperienceInfo","useState","useEffect","async","console","log","data","fetchDocuments","error","getData","highlightTextBeforeColon","text","parts","split","_jsxs","_Fragment","children","_jsx","className","concat","length","map","info","company","role","duration","details","detail","index","id","addDocument","collectionName","timestamp","Date","toISOString","addDoc","collection","db","created_at","updated_at","updateDocument","docRef","doc","updateDoc","deleteDocument","deleteDoc","getDocs","docs","uploadFile","file","folder","storageRef","ref","storage","name","uploadBytes","fileURL","getDownloadURL","url"],"sourceRoot":""}