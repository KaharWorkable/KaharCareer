{"version":3,"file":"static/js/284.7d224f5f.chunk.js","mappings":"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","sources":["components/About.js","utils/firestoreUtils.js"],"sourcesContent":["// src/components/About.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { fetchDocuments, uploadFile } from '../utils/firestoreUtils';\r\nimport { FaLinkedin, FaInstagram, FaTimes, FaDownload } from 'react-icons/fa';\r\nimport { useAuth } from '../contexts/AuthContext';\r\n\r\nconst About = () => {\r\n  const [aboutInfo, setAboutInfo] = useState([]);\r\n  const [file, setFile] = useState(null);\r\n  const { isAdmin } = useAuth();\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      try {\r\n        const data = await fetchDocuments('about');\r\n        setAboutInfo(data);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    getData();\r\n  }, []);\r\n\r\n  const handleFileChange = (e) => {\r\n    setFile(e.target.files[0]);\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    if (file) {\r\n      try {\r\n        await uploadFile(file, 'resumes');\r\n        alert('Resume uploaded successfully');\r\n      } catch (error) {\r\n        console.error('Error uploading file:', error);\r\n        alert('Failed to upload resume');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex flex-col justify-center items-center bg-gray-100 text-gray-900\">\r\n      <div className=\"container mx-auto px-4 py-10 text-center\">\r\n        <div className=\"flex flex-col md:flex-row items-center justify-center\">\r\n          <img\r\n            src=\"https://media.licdn.com/dms/image/C4D03AQHBCxycOLTXvA/profile-displayphoto-shrink_200_200/0/1654167793922?e=1723680000&v=beta&t=aM19HVp2fPjZV_1EZUwLQY4QWQrhyNh9ldWx-1bE_2Y\"\r\n            alt=\"Kahar\"\r\n            className=\"w-48 h-48 rounded-full mb-4 md:mb-0 md:mr-6\"\r\n          />\r\n          <div className=\"md:text-left\">\r\n            <h1 className=\"text-4xl font-bold mb-2\">\r\n              Hello <span className=\"inline-block\">ðŸ‘‹</span> I'm Kahar,\r\n            </h1>\r\n            {aboutInfo.length > 0 ? (\r\n              aboutInfo.map((info) => (\r\n                <h1 key={info.id} className=\"text-2xl leading-relaxed mb-4\">{info.me}</h1>\r\n              ))\r\n            ) : (\r\n              <p className=\"text-lg text-gray-500\">Loading...</p>\r\n            )}\r\n            <div className=\"flex justify-center md:justify-start space-x-6 mt-4\">\r\n              <a href=\"https://linkedin.com\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <FaLinkedin className=\"text-2xl hover:text-gray-700\" />\r\n              </a>\r\n              <a href=\"https://instagram.com\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <FaInstagram className=\"text-2xl hover:text-gray-700\" />\r\n              </a>\r\n              <a href=\"https://yourwebsite.com\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <FaTimes className=\"text-2xl hover:text-gray-700\" />\r\n              </a>\r\n            </div>\r\n            <div className=\"mt-6\">\r\n              <a href=\"#\" className=\"inline-flex items-center bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\">\r\n                <FaDownload className=\"mr-2\" /> Download Resume\r\n              </a>\r\n            </div>\r\n            {isAdmin && (\r\n              <div className=\"mt-6\">\r\n                <input type=\"file\" onChange={handleFileChange} className=\"mb-2\" />\r\n                <button onClick={handleUpload} className=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600\">Upload Resume</button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","// src/utils/firestoreUtils.js\r\nimport { db, storage } from '../firebaseConfig'; // Ensure storage is imported\r\nimport { collection, addDoc, updateDoc, deleteDoc, getDocs, doc, getDoc } from 'firebase/firestore';\r\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage'; // Import Firebase Storage functions\r\n\r\n/**\r\n * Add a document to a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @param {Object} data - The data to add\r\n * @returns {Promise<void>}\r\n */\r\nexport const addDocument = async (collectionName, data) => {\r\n  try {\r\n    const timestamp = new Date().toISOString();\r\n    await addDoc(collection(db, collectionName), {\r\n      ...data,\r\n      created_at: timestamp,\r\n      updated_at: timestamp\r\n    });\r\n  } catch (error) {\r\n    console.error(`Error adding document to ${collectionName}:`, error);\r\n  }\r\n};\r\n\r\n/**\r\n * Update a document in a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @param {string} id - The ID of the document to update\r\n * @param {Object} data - The data to update\r\n * @returns {Promise<void>}\r\n */\r\nexport const updateDocument = async (collectionName, id, data) => {\r\n  try {\r\n    const timestamp = new Date().toISOString();\r\n    const docRef = doc(db, collectionName, id);\r\n    await updateDoc(docRef, {\r\n      ...data,\r\n      updated_at: timestamp\r\n    });\r\n  } catch (error) {\r\n    console.error(`Error updating document in ${collectionName}:`, error);\r\n  }\r\n};\r\n\r\n/**\r\n * Delete a document from a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @param {string} id - The ID of the document to delete\r\n * @returns {Promise<void>}\r\n */\r\nexport const deleteDocument = async (collectionName, id) => {\r\n  try {\r\n    const docRef = doc(db, collectionName, id);\r\n    await deleteDoc(docRef);\r\n  } catch (error) {\r\n    console.error(`Error deleting document from ${collectionName}:`, error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch all documents from a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @returns {Promise<Array>}\r\n */\r\nexport const fetchDocuments = async (collectionName) => {\r\n  try {\r\n    const querySnapshot = await getDocs(collection(db, collectionName));\r\n    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n  } catch (error) {\r\n    console.error(`Error fetching documents from ${collectionName}:`, error);\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch a single document from a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @param {string} docId - The ID of the document to fetch\r\n * @returns {Promise<Object>} - The fetched document\r\n */\r\nexport const fetchDocument = async (collectionName, docId) => {\r\n  try {\r\n    const docRef = doc(db, collectionName, docId);\r\n    const docSnapshot = await getDoc(docRef);\r\n    if (docSnapshot.exists()) {\r\n      return { id: docSnapshot.id, ...docSnapshot.data() };\r\n    } else {\r\n      throw new Error('Document not found');\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching document from ${collectionName}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Upload a file to Firebase Storage\r\n * @param {File} file - The file to upload\r\n * @param {string} folder - The folder in storage to upload the file\r\n * @returns {Promise<string>} - The URL of the uploaded file\r\n */\r\nexport const uploadFile = async (file, folder) => {\r\n  try {\r\n    const storageRef = ref(storage, `${folder}/${file.name}`);\r\n    await uploadBytes(storageRef, file);\r\n    const fileURL = await getDownloadURL(storageRef);\r\n    \r\n    // Optionally, store the file URL in Firestore\r\n    await addDoc(collection(db, folder), { url: fileURL, created_at: new Date().toISOString() });\r\n\r\n    return fileURL;\r\n  } catch (error) {\r\n    console.error('Error uploading file:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"names":["About","aboutInfo","setAboutInfo","useState","file","setFile","isAdmin","useAuth","useEffect","async","data","fetchDocuments","error","console","getData","_jsx","className","children","_jsxs","src","alt","length","map","info","me","id","href","target","rel","FaLinkedin","FaInstagram","FaTimes","FaDownload","type","onChange","e","files","onClick","uploadFile","alert","addDocument","collectionName","timestamp","Date","toISOString","addDoc","collection","db","created_at","updated_at","concat","updateDocument","docRef","doc","updateDoc","deleteDocument","deleteDoc","getDocs","docs","folder","storageRef","ref","storage","name","uploadBytes","fileURL","getDownloadURL","url"],"sourceRoot":""}