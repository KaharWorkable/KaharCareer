{"version":3,"file":"static/js/436.ac8aa706.chunk.js","mappings":"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","sources":["components/Reviews.js","utils/firestoreUtils.js"],"sourcesContent":["// src/components/Reviews.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { fetchDocuments } from '../utils/firestoreUtils';\r\n\r\nconst Reviews = () => {\r\n  const [reviews, setReviews] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      try {\r\n        console.log('Fetching reviews data...');\r\n        const data = await fetchDocuments('reviews');\r\n        console.log('Data fetched:', data);\r\n        setReviews(data);\r\n      } catch (error) {\r\n        console.error('Error fetching reviews data:', error);\r\n      }\r\n    };\r\n\r\n    getData();\r\n  }, []);\r\n\r\n  const handleSubmitReview = (e) => {\r\n    e.preventDefault();\r\n    // Logic for submitting review to Firestore\r\n    alert('Review submitted successfully!');\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex flex-col justify-center items-center bg-gray-50 text-gray-800\">\r\n      <div className=\"container mx-auto px-4 py-10 text-center\">\r\n        <h2 className=\"text-3xl font-bold mb-4\">Reviews</h2>\r\n        {reviews.length > 0 ? (\r\n          reviews.map((review) => (\r\n            <p key={review.id} className=\"text-lg\">{review.content}</p>\r\n          ))\r\n        ) : (\r\n          <p className=\"text-lg\">Loading...</p>\r\n        )}\r\n        <hr className=\"my-8 border-gray-300\" />\r\n        <div className=\"max-w-2xl mx-auto bg-white p-6 rounded-lg shadow-md\">\r\n          <h2 className=\"text-2xl font-bold mb-4 text-center\">Leave a Review</h2>\r\n          <p className=\"text-center text-gray-600 mb-4\">\r\n            I would love to hear your feedback on my resume and website. What areas do you think I can improve to make my profile more compelling?\r\n          </p>\r\n          <form onSubmit={handleSubmitReview} className=\"space-y-4\">\r\n            <div>\r\n              <label htmlFor=\"name\" className=\"block text-left text-sm font-medium text-gray-700\">Name</label>\r\n              <input type=\"text\" id=\"name\" className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50\" />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"email\" className=\"block text-left text-sm font-medium text-gray-700\">Email</label>\r\n              <input type=\"email\" id=\"email\" className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50\" />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"message\" className=\"block text-left text-sm font-medium text-gray-700\">Message</label>\r\n              <textarea id=\"message\" rows=\"4\" className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50\"></textarea>\r\n            </div>\r\n            <div className=\"text-left\">\r\n              <button type=\"submit\" className=\"inline-flex items-center px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75\">\r\n                Submit\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Reviews;\r\n","// src/utils/firestoreUtils.js\r\nimport { db, storage } from '../firebaseConfig'; // Ensure storage is imported\r\nimport { collection, addDoc, updateDoc, deleteDoc, getDocs, doc, getDoc } from 'firebase/firestore';\r\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage'; // Import Firebase Storage functions\r\n\r\n/**\r\n * Add a document to a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @param {Object} data - The data to add\r\n * @returns {Promise<void>}\r\n */\r\nexport const addDocument = async (collectionName, data) => {\r\n  try {\r\n    const timestamp = new Date().toISOString();\r\n    await addDoc(collection(db, collectionName), {\r\n      ...data,\r\n      created_at: timestamp,\r\n      updated_at: timestamp\r\n    });\r\n  } catch (error) {\r\n    console.error(`Error adding document to ${collectionName}:`, error);\r\n  }\r\n};\r\n\r\n/**\r\n * Update a document in a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @param {string} id - The ID of the document to update\r\n * @param {Object} data - The data to update\r\n * @returns {Promise<void>}\r\n */\r\nexport const updateDocument = async (collectionName, id, data) => {\r\n  try {\r\n    const timestamp = new Date().toISOString();\r\n    const docRef = doc(db, collectionName, id);\r\n    await updateDoc(docRef, {\r\n      ...data,\r\n      updated_at: timestamp\r\n    });\r\n  } catch (error) {\r\n    console.error(`Error updating document in ${collectionName}:`, error);\r\n  }\r\n};\r\n\r\n/**\r\n * Delete a document from a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @param {string} id - The ID of the document to delete\r\n * @returns {Promise<void>}\r\n */\r\nexport const deleteDocument = async (collectionName, id) => {\r\n  try {\r\n    const docRef = doc(db, collectionName, id);\r\n    await deleteDoc(docRef);\r\n  } catch (error) {\r\n    console.error(`Error deleting document from ${collectionName}:`, error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch all documents from a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @returns {Promise<Array>}\r\n */\r\nexport const fetchDocuments = async (collectionName) => {\r\n  try {\r\n    const querySnapshot = await getDocs(collection(db, collectionName));\r\n    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n  } catch (error) {\r\n    console.error(`Error fetching documents from ${collectionName}:`, error);\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch a single document from a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @param {string} docId - The ID of the document to fetch\r\n * @returns {Promise<Object>} - The fetched document\r\n */\r\nexport const fetchDocument = async (collectionName, docId) => {\r\n  try {\r\n    const docRef = doc(db, collectionName, docId);\r\n    const docSnapshot = await getDoc(docRef);\r\n    if (docSnapshot.exists()) {\r\n      return { id: docSnapshot.id, ...docSnapshot.data() };\r\n    } else {\r\n      throw new Error('Document not found');\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching document from ${collectionName}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Upload a file to Firebase Storage\r\n * @param {File} file - The file to upload\r\n * @param {string} folder - The folder in storage to upload the file\r\n * @returns {Promise<string>} - The URL of the uploaded file\r\n */\r\nexport const uploadFile = async (file, folder) => {\r\n  try {\r\n    const storageRef = ref(storage, `${folder}/${file.name}`);\r\n    await uploadBytes(storageRef, file);\r\n    const fileURL = await getDownloadURL(storageRef);\r\n    \r\n    // Optionally, store the file URL in Firestore\r\n    await addDoc(collection(db, folder), { url: fileURL, created_at: new Date().toISOString() });\r\n\r\n    return fileURL;\r\n  } catch (error) {\r\n    console.error('Error uploading file:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"names":["Reviews","reviews","setReviews","useState","useEffect","async","console","log","data","fetchDocuments","error","getData","_jsx","className","children","_jsxs","length","map","review","content","id","onSubmit","e","preventDefault","alert","htmlFor","type","rows","addDocument","collectionName","timestamp","Date","toISOString","addDoc","collection","db","created_at","updated_at","concat","updateDocument","docRef","doc","updateDoc","deleteDocument","deleteDoc","getDocs","docs","uploadFile","file","folder","storageRef","ref","storage","name","uploadBytes","fileURL","getDownloadURL","url"],"sourceRoot":""}