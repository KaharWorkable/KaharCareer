{"version":3,"file":"static/js/443.f77e93e4.chunk.js","mappings":"oKAIA,MAgCA,EAhCiBA,KACf,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,IAiB/C,OAfAC,EAAAA,EAAAA,YAAU,KACQC,WACd,IACEC,QAAQC,IAAI,6BACZ,MAAMC,QAAaC,EAAAA,EAAAA,IAAe,YAClCH,QAAQC,IAAI,gBAAiBC,GAC7BN,EAAeM,EACjB,CAAE,MAAOE,GACPJ,QAAQI,MAAM,gCAAiCA,EACjD,GAGFC,EAAS,GACR,KAGDC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8BAA6BC,SAAA,EAC1CC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,0BAAyBC,SAAC,aACvCb,EAAYe,OAAS,EACpBf,EAAYgB,KAAKC,IACfH,EAAAA,EAAAA,KAAA,KAAiBF,UAAU,UAASC,SAAEI,EAAKC,SAAnCD,EAAKE,OAGfL,EAAAA,EAAAA,KAAA,KAAGF,UAAU,UAASC,SAAC,iBAErB,C,mFCtBH,MAAMO,EAAchB,MAAOiB,EAAgBd,KAChD,IACE,MAAMe,GAAY,IAAIC,MAAOC,oBACvBC,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAWC,EAAAA,GAAIN,GAAiB,IACxCd,EACHqB,WAAYN,EACZO,WAAYP,GAEhB,CAAE,MAAOb,GACPJ,QAAQI,MAAM,4BAADqB,OAA6BT,EAAc,KAAKZ,EAC/D,GAUWsB,EAAiB3B,MAAOiB,EAAgBF,EAAIZ,KACvD,IACE,MAAMe,GAAY,IAAIC,MAAOC,cACvBQ,GAASC,EAAAA,EAAAA,IAAIN,EAAAA,GAAIN,EAAgBF,SACjCe,EAAAA,EAAAA,IAAUF,EAAQ,IACnBzB,EACHsB,WAAYP,GAEhB,CAAE,MAAOb,GACPJ,QAAQI,MAAM,8BAADqB,OAA+BT,EAAc,KAAKZ,EACjE,GASW0B,EAAiB/B,MAAOiB,EAAgBF,KACnD,IACE,MAAMa,GAASC,EAAAA,EAAAA,IAAIN,EAAAA,GAAIN,EAAgBF,SACjCiB,EAAAA,EAAAA,IAAUJ,EAClB,CAAE,MAAOvB,GACPJ,QAAQI,MAAM,gCAADqB,OAAiCT,EAAc,KAAKZ,EACnE,GAQWD,EAAiBJ,UAC5B,IAEE,aAD4BiC,EAAAA,EAAAA,KAAQX,EAAAA,EAAAA,IAAWC,EAAAA,GAAIN,KAC9BiB,KAAKtB,KAAIiB,IAAG,CAAOd,GAAIc,EAAId,MAAOc,EAAI1B,UAC7D,CAAE,MAAOE,GAEP,OADAJ,QAAQI,MAAM,iCAADqB,OAAkCT,EAAc,KAAKZ,GAC3D,EACT,E","sources":["components/Projects.js","utils/firestoreUtils.js"],"sourcesContent":["// src/components/Projects.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { fetchDocuments } from '../utils/firestoreUtils';\r\n\r\nconst Projects = () => {\r\n  const [projectInfo, setProjectInfo] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      try {\r\n        console.log('Fetching projects data...');\r\n        const data = await fetchDocuments('projects');\r\n        console.log('Data fetched:', data);\r\n        setProjectInfo(data);\r\n      } catch (error) {\r\n        console.error('Error fetching projects data:', error);\r\n      }\r\n    };\r\n\r\n    getData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-6\">\r\n      <h2 className=\"text-3xl font-bold mb-4\">Projects</h2>\r\n      {projectInfo.length > 0 ? (\r\n        projectInfo.map((info) => (\r\n          <p key={info.id} className=\"text-lg\">{info.content}</p>\r\n        ))\r\n      ) : (\r\n        <p className=\"text-lg\">Loading...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Projects;\r\n","// src/utils/firestoreUtils.js\r\nimport { db } from '../firebaseConfig';\r\nimport { collection, addDoc, updateDoc, deleteDoc, getDocs, doc } from 'firebase/firestore';\r\n\r\n/**\r\n * Add a document to a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @param {Object} data - The data to add\r\n * @returns {Promise<void>}\r\n */\r\nexport const addDocument = async (collectionName, data) => {\r\n  try {\r\n    const timestamp = new Date().toISOString();\r\n    await addDoc(collection(db, collectionName), {\r\n      ...data,\r\n      created_at: timestamp,\r\n      updated_at: timestamp\r\n    });\r\n  } catch (error) {\r\n    console.error(`Error adding document to ${collectionName}:`, error);\r\n  }\r\n};\r\n\r\n/**\r\n * Update a document in a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @param {string} id - The ID of the document to update\r\n * @param {Object} data - The data to update\r\n * @returns {Promise<void>}\r\n */\r\nexport const updateDocument = async (collectionName, id, data) => {\r\n  try {\r\n    const timestamp = new Date().toISOString();\r\n    const docRef = doc(db, collectionName, id);\r\n    await updateDoc(docRef, {\r\n      ...data,\r\n      updated_at: timestamp\r\n    });\r\n  } catch (error) {\r\n    console.error(`Error updating document in ${collectionName}:`, error);\r\n  }\r\n};\r\n\r\n/**\r\n * Delete a document from a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @param {string} id - The ID of the document to delete\r\n * @returns {Promise<void>}\r\n */\r\nexport const deleteDocument = async (collectionName, id) => {\r\n  try {\r\n    const docRef = doc(db, collectionName, id);\r\n    await deleteDoc(docRef);\r\n  } catch (error) {\r\n    console.error(`Error deleting document from ${collectionName}:`, error);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch all documents from a Firestore collection\r\n * @param {string} collectionName - The name of the collection\r\n * @returns {Promise<Array>}\r\n */\r\nexport const fetchDocuments = async (collectionName) => {\r\n  try {\r\n    const querySnapshot = await getDocs(collection(db, collectionName));\r\n    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n  } catch (error) {\r\n    console.error(`Error fetching documents from ${collectionName}:`, error);\r\n    return [];\r\n  }\r\n};\r\n"],"names":["Projects","projectInfo","setProjectInfo","useState","useEffect","async","console","log","data","fetchDocuments","error","getData","_jsxs","className","children","_jsx","length","map","info","content","id","addDocument","collectionName","timestamp","Date","toISOString","addDoc","collection","db","created_at","updated_at","concat","updateDocument","docRef","doc","updateDoc","deleteDocument","deleteDoc","getDocs","docs"],"sourceRoot":""}